AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::Serverless-2016-10-31'
Description: Root stack for Red Comet Infrastructure

###############################################################################
Parameters:
###############################################################################

  Environment:
    Description: Enter deployment environment (dev, prod)
    Type: String
    AllowedValues: 
      - prod
      - dev
  HostedZone:
    Description: Route53 hosted zone
    Type: String
  ApiDomainName:
    Description: Domain of API
    Type: String
  FrontendDomainName:
    Description: Domain of frontend web app
    Type: String
  FrontendRootBucketName:
    Description: S3 bucket for frontend web app
    Type: String
  FrontendLogBucketName:
    Description: S3 bucket for frontend web app logs
    Type: String
  AdminDomainName:
    Description: Domain of admin web app
    Type: String
  AdminRootBucketName:
    Description: S3 bucket for admin web app
    Type: String
  AdminLogBucketName:
    Description: S3 bucket for admin web app logs
    Type: String

###############################################################################
Resources:
###############################################################################

# Web
###############################################################################

# TODO: Automate certificate validation
# TODO: Review max and min TTL
  FrontendStack:
    Type: AWS::CloudFormation::Stack
    Properties:
      Parameters:
        HostedZone: !Ref HostedZone
        DomainName: !Ref FrontendDomainName
        RootBucketName: !Ref FrontendRootBucketName
        LogBucketName: !Ref FrontendLogBucketName
        Environment: !Ref Environment
        Service: Frontend
      TemplateURL: templates/static-site.template.yml
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Service
          Value: Frontend

# Admin
###############################################################################

# TODO: Automate certificate validation
# TODO: Review max and min TTL
  AdminStack:
    Type: AWS::CloudFormation::Stack
    Properties:
      Parameters:
        HostedZone: !Ref HostedZone
        DomainName: !Ref AdminDomainName
        RootBucketName: !Ref AdminRootBucketName
        LogBucketName: !Ref AdminLogBucketName
        Environment: !Ref Environment
        Service: Admin
      TemplateURL: templates/static-site.template.yml
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Service
          Value: Admin

# API
###############################################################################

  Certificate:
    Type: AWS::CertificateManager::Certificate
    Properties:
      DomainName: !Ref ApiDomainName
      ValidationMethod: DNS
      Tags:
        - Key: Environment
          Value: !Ref Environment

  RedCometAPI:
    Type: AWS::Serverless::Api
    Properties:
      Domain:
        DomainName: !Ref ApiDomainName
        CertificateArn: !Ref Certificate
        EndpointConfiguration: EDGE
        Route53:
          HostedZoneName: !Join ["", [!Ref HostedZone, "."]]
          EvaluateTargetHealth: true
      StageName: !Sub ${Environment}
      Tags:
        Environment: !Ref Environment
        Service: Contact

  SharedLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: !Sub ${Environment}-Shared-Layer
      Description: Dependencies for Contact functions
      ContentUri: dist/layers/nodejs
      CompatibleRuntimes:
        - nodejs12.x

# Contact Service
###############################################################################

  PostContactLambda:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${Environment}-PostContact
      Handler: index.post
      Runtime: nodejs12.x
      CodeUri: dist/contact 
      Layers:
        - !Ref SharedLayer
      MemorySize: 128 
      Timeout: 30
      Policies:
        - AWSLambdaBasicExecutionRole
        - DynamoDBCrudPolicy:
            TableName: !Sub ${Environment}-Contacts
      Events:
        MyEndpoint:
          Type: Api 
          Properties:
            Path: /contact
            Method: post
            RestApiId:
              Ref: RedCometAPI
      Environment:
        Variables:
          CONTACT_TABLE: !Sub ${Environment}-Contacts
      Tags:
        Environment: !Ref Environment
        Service: Contact

  # TODO: Require authorization
  GetContactsLambda:
    Type: AWS::Serverless::Function
    DependsOn: ContactsTable
    Properties:
      FunctionName: !Sub ${Environment}-GetContacts
      Handler: index.get
      Runtime: nodejs12.x
      CodeUri: dist/contact
      Layers:
        - !Ref SharedLayer
      MemorySize: 128 
      Timeout: 30
      Policies:
        - AWSLambdaBasicExecutionRole
        - DynamoDBCrudPolicy:
            TableName: !Sub ${Environment}-Contacts
      Events:
        MyEndpoint:
          Type: Api 
          Properties:
            Path: /contact
            Method: get
            RestApiId:
              Ref: RedCometAPI
      Environment:
        Variables:
          CONTACT_TABLE: !Sub ${Environment}-Contacts
      Tags:
        Environment: !Ref Environment
        Service: Contact

  # TODO: Require authorization
  GetContactByIdLambda:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${Environment}-GetContactById
      Handler: index.getById
      Runtime: nodejs12.x
      CodeUri: dist/contact
      Layers:
        - !Ref SharedLayer
      MemorySize: 128 
      Timeout: 30
      Policies:
        - AWSLambdaBasicExecutionRole
        - AmazonDynamoDBFullAccess # TODO: Limit Permissions
      Events:
        MyEndpoint:
          Type: Api 
          Properties:
            Path: /contact/{id}
            Method: get
            RestApiId:
              Ref: RedCometAPI
      Environment:
        Variables:
          CONTACT_TABLE: !Sub ${Environment}-Contacts
      Tags:
        Environment: !Ref Environment
        Service: Contact

  SendContactEmailLambda:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${Environment}-SendContactEmail
      Handler: index.sendEmail
      Runtime: nodejs12.x
      CodeUri: dist/contact
      Layers:
        - !Ref SharedLayer
      MemorySize: 128 
      Timeout: 30
      Policies:
        - AWSLambdaBasicExecutionRole
      Role:
        Fn::GetAtt: [ SendContactEmailLambdaRole , Arn ]
      Environment:
        Variables:
          TO_EMAIL: zac.strangeway@gmail.com
          FROM_EMAIL: zac.strangeway@gmail.com
      Tags:
        Environment: !Ref Environment
        Service: Contact

  ContactsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub ${Environment}-Contacts
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      StreamSpecification:
        StreamViewType: NEW_IMAGE

  ContactsTableStreamMapping:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      BatchSize: 1
      Enabled: True
      EventSourceArn:
        Fn::GetAtt: [ ContactsTable , StreamArn ]
      FunctionName:
        Fn::GetAtt: [ SendContactEmailLambda , Arn ]
      StartingPosition: LATEST

  SendContactEmailLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow #allow lambda to assume this role
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: LambdaRolePolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
              Resource: arn:aws:logs:*:*:*
            - Effect: Allow
              Action:
              - dynamodb:DescribeStream
              - dynamodb:GetRecords
              - dynamodb:GetShardIterator
              - dynamodb:ListStreams
              Resource: "*" # TODO: Limit permissions
            - Effect: Allow
              Action:
              - ses:GetIdentityVerificationAttributes
              - ses:SendEmail
              - ses:SendRawEmail
              - ses:VerifyEmailIdentity"
              Resource: "*" # TODO: Limit permissions

# Quote Service
###############################################################################

  PostQuoteLambda:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${Environment}-PostQuote
      Handler: index.post
      Runtime: nodejs12.x
      CodeUri: dist/quote
      Layers:
        - !Ref SharedLayer
      MemorySize: 128 
      Timeout: 30
      Policies:
        - AWSLambdaBasicExecutionRole
        - DynamoDBCrudPolicy:
            TableName: !Sub ${Environment}-Quotes
      Events:
        MyEndpoint:
          Type: Api 
          Properties:
            Path: /quote
            Method: post
            RestApiId:
              Ref: RedCometAPI
      Environment:
        Variables:
          QUOTE_TABLE: !Sub ${Environment}-Quotes
      Tags:
        Environment: !Ref Environment
        Service: Quotes

  # TODO: Require authorization
  GetQuotesLambda:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${Environment}-GetQuotes
      Handler: index.get
      Runtime: nodejs12.x
      CodeUri: dist/quote
      Layers:
        - !Ref SharedLayer
      MemorySize: 128 
      Timeout: 30
      Policies:
        - AWSLambdaBasicExecutionRole
        - DynamoDBCrudPolicy:
            TableName: !Sub ${Environment}-Quotes
      Events:
        MyEndpoint:
          Type: Api 
          Properties:
            Path: /quote
            Method: get
            RestApiId:
              Ref: RedCometAPI
      Environment:
        Variables:
          QUOTES_TABLE: !Sub ${Environment}-Quotes
      Tags:
        Environment: !Ref Environment
        Service: Quotes

  # TODO: Require authorization
  GetQuoteByIdLambda:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${Environment}-getQuoteById
      Handler: index.getById
      Runtime: nodejs12.x
      CodeUri: dist/quote
      Layers:
        - !Ref SharedLayer
      MemorySize: 128 
      Timeout: 30
      Policies:
        - AWSLambdaBasicExecutionRole
        - DynamoDBCrudPolicy:
            TableName: !Sub ${Environment}-Quote
      Events:
        MyEndpoint:
          Type: Api 
          Properties:
            Path: /quote/{id}
            Method: get
            RestApiId:
              Ref: RedCometAPI
      Environment:
        Variables:
          QUOTES_TABLE: !Sub ${Environment}-Quotes
      Tags:
        Environment: !Ref Environment
        Service: Quotes

  QuotesTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      TableName: !Sub ${Environment}-Quotes
      PrimaryKey:
        Name: id
        Type: String
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      Tags:
        Environment: !Ref Environment
        Service: Quotes

###############################################################################
Outputs:
###############################################################################

  ApiUrl:
    Value: !Ref ApiDomainName
    Description: Url for the api.

  FrontendUrl:
    Value: !Ref FrontendDomainName
    Description: Url for the web app.
  FrontendRootBucketName:
    Value: !GetAtt FrontendStack.Outputs.RootBucketName
    Description: Name of the S3 bucket that hosts the static site for the web app.
  FrontendLogBucketName:
    Value: !GetAtt FrontendStack.Outputs.LogBucketName
    Description: Name of the S3 bucket that stores the logs for the web app.

  AdminUrl:
    Value: !Ref AdminDomainName
    Description: Url for the web admin.
  AdminRootBucketName:
    Value: !GetAtt AdminStack.Outputs.RootBucketName
    Description: Name of the S3 bucket that hosts the static site for the web admin.
  AdminLogBucketName:
    Value: !GetAtt AdminStack.Outputs.LogBucketName
    Description: Name of the S3 bucket that stores the logs for the web admin.
